#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üî® –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.BUILD_TYPE = 'static';

try {
  // –®–∞–≥ 1: –°–±–æ—Ä–∫–∞ Next.js —Å BUILD_TYPE=static
  console.log('üì¶ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±–æ—Ä–∫–∞ —Å BUILD_TYPE=static...');
  execSync('npx cross-env BUILD_TYPE=static next build', { 
    stdio: 'inherit',
    env: { ...process.env, BUILD_TYPE: 'static' }
  });
  
  // –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é out –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
  if (!fs.existsSync('./out')) {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ out...');
    fs.mkdirSync('./out', { recursive: true });
  }
  
  // –®–∞–≥ 3: –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å next export
  console.log('üì§ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è next export...');
  try {
    execSync('npx next export', { 
      stdio: 'inherit',
      env: { ...process.env, BUILD_TYPE: 'static' }
    });
  } catch (exportError) {
    console.warn('‚ö†Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...');
    
    // –®–∞–≥ 4: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ next export –Ω–µ —É–¥–∞–ª—Å—è
    copyStaticFiles();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (fs.existsSync('./out') && fs.readdirSync('./out').length > 0) {
    console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ./out');
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª app.webmanifest –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (fs.existsSync('./public/app.webmanifest')) {
      fs.copyFileSync('./public/app.webmanifest', './out/app.webmanifest');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ–ø–∏—Ä—É–µ–º public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if (fs.existsSync('./public')) {
      copyDirectory('./public', './out');
    }
  } else {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç!');
    process.exit(1);
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:', error.message);
  process.exit(1);
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ .next –≤ out –≤—Ä—É—á–Ω—É—é
 */
function copyStaticFiles() {
  console.log('üìã –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ .next...');
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
  if (fs.existsSync('./.next/static')) {
    if (!fs.existsSync('./out/_next')) {
      fs.mkdirSync('./out/_next', { recursive: true });
    }
    copyDirectory('./.next/static', './out/_next/static');
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º HTML-—Ñ–∞–π–ª—ã
  if (fs.existsSync('./.next/server/pages')) {
    const pages = walkSync('./.next/server/pages');
    
    for (const page of pages) {
      if (page.endsWith('.html')) {
        const relativePath = path.relative('./.next/server/pages', page);
        const destPath = path.join('./out', relativePath);
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        const destDir = path.dirname(destPath);
        if (!fs.existsSync(destDir)) {
          fs.mkdirSync(destDir, { recursive: true });
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º HTML —Ñ–∞–π–ª
        fs.copyFileSync(page, destPath);
      }
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π index.html –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!fs.existsSync('./out/index.html')) {
    createBasicHTML('./out/index.html');
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π HTML —Ñ–∞–π–ª
 */
function createBasicHTML(filePath) {
  const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
  <title>SAMGA</title>
</head>
<body>
  <div id="__next"></div>
  <script src="/_next/static/chunks/main.js" defer></script>
</body>
</html>`;
  
  fs.writeFileSync(filePath, htmlContent);
}

/**
 * –ö–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
 */
function copyDirectory(source, destination) {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(source)) return;
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  if (!fs.existsSync(destination)) {
    fs.mkdirSync(destination, { recursive: true });
  }
  
  // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
  const entries = fs.readdirSync(source, { withFileTypes: true });
  
  for (const entry of entries) {
    const sourcePath = path.join(source, entry.name);
    const destPath = path.join(destination, entry.name);
    
    if (entry.isDirectory()) {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      copyDirectory(sourcePath, destPath);
    } else {
      // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
      fs.copyFileSync(sourcePath, destPath);
    }
  }
}

/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
 */
function walkSync(dir, filelist = []) {
  const files = fs.readdirSync(dir);
  
  for (const file of files) {
    const filepath = path.join(dir, file);
    const stat = fs.statSync(filepath);
    
    if (stat.isDirectory()) {
      filelist = walkSync(filepath, filelist);
    } else {
      filelist.push(filepath);
    }
  }
  
  return filelist;
} 